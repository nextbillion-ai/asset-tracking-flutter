group 'ai.nextbillion.nb_asset_tracking_flutter'
version '1.1.0'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
        maven {
            url "artifactregistry://asia-maven.pkg.dev/nextbillion/mobile-snapshot-maven"
        }
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.com.google.cloud.artifactregistry:artifactregistry-gradle-plugin:2.2.1"

    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "artifactregistry://asia-maven.pkg.dev/nextbillion/mobile-snapshot-maven"
        }
        maven { url 'https://plugins.gradle.org/m2' }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.cloud.artifactregistry.gradle-plugin'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'ai.nextbillion.nb_asset_tracking_flutter'
    }

    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 21
        buildConfigField "String", "GIT_REVISION_SHORT", String.format("\"%s\"", getGitRevision())
        buildConfigField "String", "NBTRACKING_FLUTTER_VERSION", String.format("\"%s\"", project.version)
    }

    dependencies {
        def nbPluginVersion = "1.1.1-SNAPSHOT"

        implementation "ai.nextbillion:nb-asset-tracking:$nbPluginVersion"
        implementation 'com.google.code.gson:gson:2.9.0'
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
    }

    buildTypes {
        release {
            consumerProguardFiles "proguard-rules.pro"
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
def static getGitRevision() {
    def cmd = "git rev-parse --short HEAD"
    def process = cmd.execute()
    def ref = process.text.trim()
    return ref
}